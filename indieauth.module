<?php

/**
 * @file
 * An indieauth client implementation.
 */

/**
 * Implements hook_menu().
 */
function indieauth_menu() {
  $items['indieauth-endpoint'] = array(
    'page callback' => 'indieauth_endpoint',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function indieauth_block_info() {
  $blocks['indieauth_sign_in'] = array(
    'info' => t('IndieAuth sign-in'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function indieauth_block_view($delta = '') {
  global $user;

  $block = array();
  switch ($delta) {
    case 'indieauth_sign_in':
      if (!$user->uid) {
        $block['subject'] = t('IndieAuth sign-in');
        $block['content'] = drupal_get_form('indieauth_sign_in_form');
      }
      return $block;
  }
  return $block;
}

/**
 * Authorization endpoint.
 *
 * @return string
 */
function indieauth_authorization_endpoint() {
	return variable_get(
	  'indieauth_authorization_endpoint',
		'https://indieauth.com/auth'
	);
}

/**
 * Token endpoint.
 *
 * @return string
 */
function indieauth_token_endpoint() {
	return variable_get(
	  'indieauth_token_endpoint',
		'https://tokens.indieauth.com/token'
	);
}

/**
 * Format username.
 *
 * @return string
 */
function indieauth_format_username($me) {
	return trim(str_replace(array('http://', 'https://'), '', $me), '/');
}

/**
 * Format mail.
 *
 * @return string
 */
function indieauth_format_mail($me) {
  return 'no-one@' . trim(str_replace(array('http://', 'https://'), '', $me), '/');
}

/**
 * Submission endpoint; Menu callback.
 */
function indieauth_endpoint() {
  if (!isset($_GET['code']) ||
      !isset($_GET['me']) ||
      !isset($_GET['state'])) {
    drupal_not_found();
  }

  $authorization_code = $_GET['code'];
  $me = $_GET['me'];
  $state = $_GET['state'];

  $cid = implode(':', array('indieauth', $me, $state));
  $authorization = cache_get($cid)->data;

  $access_token = IndieAuth\Client::getAccessToken(
    $authorization['token_endpoint'],
    $authorization_code,
    $me,
    $authorization['redirect_uri'],
    $authorization['client_id'],
    $state
  );
  $authorization['access_token'] = $access_token['access_token'];

  if (!empty($authorization['access_token'])) {
    cache_set($cid, $authorization, 'cache', CACHE_PERMANENT);

    $account = user_external_load($me);
    if (isset($account->uid)) {
      if (!variable_get('user_email_verification', TRUE) || $account->login) {
        // Check if user is blocked.
        $form_state['values']['name'] = $account->name;
        user_login_name_validate(array(), $form_state);
        if (!form_get_errors()) {
          // Load global $user and perform final login tasks.
          $form_state['uid'] = $account->uid;
          user_login_submit(array(), $form_state);
          // Let other modules act on IndieAuth login
          //module_invoke_all('indieauth_login', $authorization, $account);
        }
      }
      else {
        drupal_set_message(t('You must validate your email address for this account before logging in via OpenID.'));
      }
    }
    elseif (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)) {
      // Register new user.

      $form_state['values'] = array();
      $form_state['values']['op'] = t('Create new account');
      $form_state['values']['name'] = indieauth_format_username($me);
      $form_state['values']['mail'] = indieauth_format_mail($me);

      drupal_form_submit('user_register_form', $form_state);

      if (!empty($form_state['user'])) {
        //module_invoke_all('openid_response', $response, $form_state['user']);
        drupal_goto();
      }

      $messages = drupal_get_messages('error');
      if (empty($form_state['values']['name']) || empty($form_state['values']['mail'])) {
        // If the OpenID provider did not provide both a user name and an email
        // address, ask the user to complete the registration manually instead of
        // showing the error messages about the missing values generated by FAPI.
        drupal_set_message(t('Complete the registration by filling out the form below. If you already have an account, you can <a href="@login">log in</a> now and add your OpenID under "My account".', array('@login' => url('user/login'))), 'warning');
      }
      else {
        drupal_set_message(t('Account registration using the information provided by your OpenID provider failed due to the reasons listed below. Complete the registration by filling out the form below. If you already have an account, you can <a href="@login">log in</a> now and add your OpenID under "My account".', array('@login' => url('user/login'))), 'warning');
        // Append form validation errors below the above warning.
        foreach ($messages['error'] as $message) {
          drupal_set_message($message, 'error');
        }
      }

      // We were unable to register a valid new user. Redirect to the normal
      // registration page and prefill with the values we received.
      $destination = drupal_get_destination();
      unset($_GET['destination']);
      drupal_goto('user/register', array('query' => $destination));
    }
    else {
      drupal_set_message(t('Only site administrators can create new user accounts.'), 'error');
    }
  }
  drupal_goto();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function indieauth_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  // Remove reqired password and mail field from user register form if necessary
  $mail_vefification = variable_get('user_email_verification', TRUE);
  if (!$mail_vefification) {
    $form['account']['pass']['#required'] = FALSE;
    $form['account']['pass']['#access'] = FALSE;
    $form['account']['mail']['#required'] = FALSE;
    $form['account']['mail']['#access'] = FALSE;
  }
}

/**
 * Sign-in form.
 */
function indieauth_sign_in_form($form, &$form_state) {
  $form['domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Domain'),
    '#size' => 15,
    '#maxlength' => '255',
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sign-in'),
  );
  return $form;
}

/**
 * Sign-in form; Validate handler.
 */
function indieauth_sign_in_form_validate($form, &$form_state) {
  $domain = $form_state['values']['domain'];
  if (strpos($domain, 'http:') === 0 ||
      strpos($domain, 'https:') !== 0) {
    form_set_error('domain', 'Please prefix your domain with a secure protocol, e.g. <em>https:</em>//example.org');
  }

  $me = trim($form_state['values']['domain'], '/') . '/';
  $state = 'sign-in';

  $authorization_endpoint = IndieAuth\Client::discoverAuthorizationEndpoint($me);
  $token_endpoint = IndieAuth\Client::discoverTokenEndpoint($me);
  if (!$authorization_endpoint) {
    form_set_error('domain', 'Could not discover a valid IndieAuth authorization endpoint.');
  }
  if (!$token_endpoint) {
    form_set_error('domain', 'Could not discover a valid IndieAuth token endpoint.');
  }

  if ($authorization_endpoint && $token_endpoint) {
    // Cache the authorization details for later retrieval.
    $cid = implode(':', array('indieauth', $me, $state));
    $data = array(
      'token_endpoint' => $token_endpoint,
      'authorization_endpoint' => $authorization_endpoint,
    );
    cache_set($cid, $data, 'cache', time() + 60 * 60);
  }
}

/**
 * Sign-in form; Submit handler.
 */
function indieauth_sign_in_form_submit($form, &$form_state) {
  $authorization_endpoint = '';
  $me = trim($form_state['values']['domain'], '/') . '/';
  $redirect_uri = url('indieauth-endpoint', array('absolute' => TRUE));
  $client_id = url('<front>', array('absolute' => TRUE));
  $state = 'sign-in';
  $scope = '';

  $cid = implode(':', array('indieauth', $me, $state));
  $authorization = cache_get($cid)->data;

  $authorization_url = IndieAuth\Client::buildAuthorizationURL(
    $authorization['authorization_endpoint'],
    $me,
    $redirect_uri,
    $client_id,
    $state,
    $scope
  );

  // Cache the authorization details for later retrieval.
  $cid = implode(':', array('indieauth', $me, $state));
  $authorization = array(
    'me' => $me,
    'redirect_uri' => $redirect_uri,
    'client_id' => $client_id,
    'state' => $state,
    'scope' => $scope,
    'code' => '',
  ) + $authorization;
  cache_set($cid, $authorization, 'cache', time() + 60 * 60);

  // Go to remote authorization url
  drupal_goto($authorization_url);
}
